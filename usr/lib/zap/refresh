#!/bin/ksh
#
# SPDX-License-Identifier: CDDL-1.0
#
# {{{ CDDL HEADER
#
# This file and its contents are supplied under the terms of the
# Common Development and Distribution License ("CDDL"), version 1.0.
# You may only use this file in accordance with the terms of version
# 1.0 of the CDDL.
#
# A full copy of the text of the CDDL should have accompanied this
# source. A copy of the CDDL is also available via the Internet at
# http://www.illumos.org/license/CDDL.
#
# }}}
#
# Copyright 2025 Peter Tribble
#

#
# refresh all metadata for all package and overlay repos
#

ZAPLIBDIR="/usr/lib/zap"
CFGDIR="/etc/zap"
ODIR="/var/sadm/overlays"

#
# global context switch
# will force all configuration to be relative to the alternate root
#
case $1 in
-C)
	ALTROOT="$2"
	CTXARGS="-C ${ALTROOT}"
	shift
	shift
	if [ ! -d "$ALTROOT" ]; then
	    echo "ERROR: alternate root $ALTROOT doesn't exist"
	    exit 1
	fi
	CFGDIR="${ALTROOT}/${CFGDIR}"
	ODIR="${ALTROOT}/${ODIR}"
	;;
esac

USER_AGENT="zap"/$(${ZAPLIBDIR}/zap-cfg pkgversion)
ZAP_PROXY=$(${ZAPLIBDIR}/zap-cfg proxy)

if [ -n "$ZAP_PROXY" ]; then
    http_proxy=$ZAP_PROXY
    export http_proxy
fi

WCLIENT=/usr/bin/curl
WARGS="-A ${USER_AGENT} -f -s --compressed -o"
if [ ! -x $WCLIENT ]; then
    WCLIENT=/usr/bin/wget
    WARGS="-U ${USER_AGENT} -q --compression=gzip -O"
fi
if [ ! -x $WCLIENT ]; then
    WCLIENT=/usr/bin/wget2
    WARGS="-U ${USER_AGENT} -q --compression=gzip -O"
fi

#
# download the new overlay catalogs first, and
# read the catalogs into two arrays
#
typeset -A map_ver
typeset -A map_repo
for repo in $(${ZAPLIBDIR}/zap-cfg ${CTXARGS} list-overlay-repos)
do
    REPO=$(${ZAPLIBDIR}/zap-cfg ${CTXARGS} overlay-url "$repo")
    ${WCLIENT} ${WARGS} "${CFGDIR}/repositories/${repo}.overlays.tmp" "${REPO}/catalog"
    if [ -s "${CFGDIR}/repositories/${repo}.overlays.tmp" ]; then
	mv "${CFGDIR}/repositories/${repo}.overlays" "${CFGDIR}/repositories/${repo}.overlays.bak"
	mv "${CFGDIR}/repositories/${repo}.overlays.tmp" "${CFGDIR}/repositories/${repo}.overlays"
    fi
    if [ -f "${CFGDIR}/repositories/${repo}.overlays" ]; then
	IFS='|'
	while read -r novl nver line
	do
	    if [ -z "${map_ver[$novl]}" ]; then
		# remember this if we've not seen it before
		map_ver[$novl]=$nver
		map_repo[$novl]=$repo
	    fi
	done < "${CFGDIR}/repositories/${repo}.overlays"
    fi
    unset IFS
done

#
# get new catalog, aliases, and filelist for each package repo
#
refresh_repo() {
    frepo="$1"
    REPO=$(${ZAPLIBDIR}/zap-cfg ${CTXARGS} repo-url "$frepo")
    ${WCLIENT} ${WARGS} "${CFGDIR}/repositories/${frepo}.catalog.tmp" "${REPO}/catalog"
    if [ -s "${CFGDIR}/repositories/${frepo}.catalog.tmp" ]; then
	mv "${CFGDIR}/repositories/${frepo}.catalog" "${CFGDIR}/repositories/${frepo}.catalog.bak"
	mv "${CFGDIR}/repositories/${frepo}.catalog.tmp" "${CFGDIR}/repositories/${frepo}.catalog"
    fi
    ${WCLIENT} ${WARGS} "${CFGDIR}/repositories/${frepo}.aliases.tmp" "${REPO}/aliases"
    if [ -s "${CFGDIR}/repositories/${frepo}.aliases.tmp" ]; then
	mv "${CFGDIR}/repositories/${frepo}.aliases" "${CFGDIR}/repositories/${frepo}.aliases.bak"
	mv "${CFGDIR}/repositories/${frepo}.aliases.tmp" "${CFGDIR}/repositories/${frepo}.aliases"
    fi
    ${WCLIENT} ${WARGS} "${CFGDIR}/repositories/${frepo}.filelist.bz2.tmp" "${REPO}/filelist.bz2"
    if [ -s "${CFGDIR}/repositories/${frepo}.filelist.bz2.tmp" ]; then
	/usr/bin/mv "${CFGDIR}/repositories/${frepo}.filelist.bz2" "${CFGDIR}/repositories/${frepo}.filelist.bz2.bak"
	/usr/bin/mv "${CFGDIR}/repositories/${frepo}.filelist.bz2.tmp" "${CFGDIR}/repositories/${frepo}.filelist.bz2"
    fi
    if [ -f "${CFGDIR}/repositories/${frepo}.filelist.bz2.tmp" ]; then
	/usr/bin/rm -f "${CFGDIR}/repositories/${frepo}.filelist.bz2.tmp"
    fi
}

#
# this walks through all the overlays for the given repo and
# verifies that they're up to date
#
refresh_overlay_repo() {
    frepo="$1"
    REPO=$(${ZAPLIBDIR}/zap-cfg ${CTXARGS} overlay-url "$frepo")
    if [ -s "${CFGDIR}/repositories/${frepo}.overlays" ]; then
	/usr/bin/awk -F'|' '{print $1}' "${CFGDIR}/repositories/${frepo}.overlays" | while read -r novl
	do
	    nver=${map_ver[$novl]}
	    trepo=${map_repo[$novl]}
	    #
	    # check that this repo is the authoritative source for this overlay
	    #
	    if [ "X$frepo" = "X$trepo" ]; then
		#
		# if the overlay file does not exist then this must be a new
		# overlay, set version 0 to force a download and don't try to
		# grep it otherwise we get a confusing error
		#
		iver="0"
		if [ -f "${ODIR}/${novl}.ovl" ]; then
		    while read -r line
		    do
			case $line in
			    VERSION*)
				iver=${line#*=}
				break
				;;
			esac
		    done<"${ODIR}/${novl}.ovl"
		fi
		if [ "X${nver}" != "X${iver}" ]; then
		    ${WCLIENT} ${WARGS} "${ODIR}/${novl}.ovl.tmp" "${REPO}/${novl}.ovl"
		    ${WCLIENT} ${WARGS} "${ODIR}/${novl}.pkgs.tmp" "${REPO}/${novl}.pkgs"
		    if [ -s "${ODIR}/${novl}.ovl.tmp" -a -s "${ODIR}/${novl}.pkgs.tmp" ]; then
			if [ -f "${ODIR}/${novl}.ovl" ]; then
			    mv "${ODIR}/${novl}.ovl" "${ODIR}/${novl}.ovl.bak"
			fi
			mv "${ODIR}/${novl}.ovl.tmp" "${ODIR}/${novl}.ovl"
			if [ -f "${ODIR}/${novl}.pkgs" ]; then
			    mv "${ODIR}/${novl}.pkgs" "${ODIR}/${novl}.pkgs.bak"
			fi
			mv "${ODIR}/${novl}.pkgs.tmp" "${ODIR}/${novl}.pkgs"
		    fi
		fi
	    fi
	done
    fi
}

#
# loop over the package repos
#
for repo in $(/usr/bin/awk '{print $2}' "${CFGDIR}/repo.list")
do
    refresh_repo "$repo"
done

#
# loop over the overlay repos
#
for repo in $(${ZAPLIBDIR}/zap-cfg ${CTXARGS} list-overlay-repos)
do
    refresh_overlay_repo "$repo"
done
