#!/bin/ksh
#
# SPDX-License-Identifier: CDDL-1.0
#
# {{{ CDDL HEADER
#
# This file and its contents are supplied under the terms of the
# Common Development and Distribution License ("CDDL"), version 1.0.
# You may only use this file in accordance with the terms of version
# 1.0 of the CDDL.
#
# A full copy of the text of the CDDL should have accompanied this
# source. A copy of the CDDL is also available via the Internet at
# http://www.illumos.org/license/CDDL.
#
# }}}
#
# Copyright 2025 Peter Tribble
#

#
# a delegated image retrieval script
# this understands the media available from
#
# https://downloads.omnios.org/media/
#
# and knows how to parse the img.json
#

DLPREFIX="https://downloads.omnios.org/media/"
JQ="/usr/bin/jq"
SUBCMD=""
TYPE=""
BRAND=""

if [ ! -x "$JQ" ]; then
    exit 1
fi

case $# in
    0)
	exit 2
	;;
    *)
	SUBCMD=$1
	shift
	;;
esac

#
# support -b for the brand, which is where it's expected to run
# support -t for the type, which is how it's delivered
# we recognise alien, bhyve, disk, lx
# (alien brand in Tribblix is the same as illumos brand in OmniOS)
# also recognise full names - illumos-dataset, bhyve-image, disk-image, lx-image
#
# there's currently a 1:1 mapping between brand and type:
# bhyve|bhyve-image
# emu|disk-image
# illumos|illumos-dataset
# lx|lx-image
#
while getopts "b:t:" opt; do
    case $opt in
	b)
	    BRAND="$OPTARG"
	    ;;
	t)
	    TYPE="$OPTARG"
	    ;;
    esac
done
shift $((OPTIND - 1))

#
# given the relationship between brand and type, convert brands to types
#
case $BRAND in
    bhyve)
	TYPE="bhyve-image"
	;;
    emu)
	TYPE="disk-image"
	;;
    illumos|alien)
	TYPE="illumos-dataset"
	;;
    lx)
	TYPE="lx-image"
	;;
esac

ZAPLIBDIR="/usr/lib/zap"
IMG_DIR="/tmp"
IMAGE_DIR=$(${ZAPLIBDIR}/zap-cfg image-dir)
USER_AGENT="zap"/$(${ZAPLIBDIR}/zap-cfg pkgversion)
ZAP_PROXY=$(${ZAPLIBDIR}/zap-cfg proxy)


if [ -n "$ZAP_PROXY" ]; then
    http_proxy=$ZAP_PROXY
    export http_proxy
fi

WCLIENT=/usr/bin/curl
WARGS="-A ${USER_AGENT} -f -s -o"
if [ ! -x $WCLIENT ]; then
    WCLIENT=/usr/bin/wget
    WARGS="-U ${USER_AGENT} -q -O"
fi
if [ ! -x $WCLIENT ]; then
    WCLIENT=/usr/bin/wget2
    WARGS="-U ${USER_AGENT} -q -O"
fi

#
# if we don't have the metadata at all, just retrieve it
# as we really can't do anything without it
# FIXME need a unique filename
#
META_JSON="${IMG_DIR}/img.json"
if [ ! -f "${META_JSON}" ]; then
    ${WCLIENT} ${WARGS} ${META_JSON} ${DLPREFIX}/img.json
fi
if [ ! -f "${META_JSON}" ]; then
    echo "ERROR: download of metadata failed"
    exit 1
fi
if [ ! -s "${META_JSON}" ]; then
    echo "ERROR: download metadata is empty"
    /usr/bin/rm -f "${META_JSON}"
    exit 1
fi

#
# the img.json has the following fields of interest
#  brand - lx bhyve illumos
#  type - lx-image bhyve-image illumos-dataset
#  path - download URL (relative)
#  comp - compression scheme
#  sha256, sha512 - checksums
#  name - long name
#  version - useful name
#  description - text
#

#
# this script is a helper for retrieve-image, but there are some useful
# options here for debugging
#
case $SUBCMD in
    'list')
	case $TYPE in
	    'lx'|'lx-image')
	        $JQ -r '.images[] | select(.type == "lx-image") | .version+"|"+.brand+"|"+.type+"|"+.description' ${META_JSON} | sort -u
	    ;;
	    'disk'|'disk-image')
	        $JQ -r '.images[] | select(.type == "disk-image") | .version+"|"+.brand+"|"+.type+"|"+.description' ${META_JSON} | sort -u
	    ;;
	    'bhyve'|'bhyve-image')
	        $JQ -r '.images[] | select(.type == "bhyve-image") | .version+"|"+.brand+"|"+.type+"|"+.description' ${META_JSON} | sort -u
	    ;;
	    'alien'|'illumos'|'illumos-dataset')
	        $JQ -r '.images[] | select(.type == "illumos-dataset") | .version+"|"+.brand+"|"+.type+"|"+.description' ${META_JSON} | sort -u
	    ;;
	    *)
		$JQ -r '.images[] | .version+"|"+.brand+"|"+.type+"|"+.description' ${META_JSON} | sort -u
		;;
	esac
	exit 0
	;;
    'types')
	$JQ -r '.images[] | .type' ${META_JSON} | sort -u
	exit 0
	;;
    'brands')
	$JQ -r '.images[] | .brand' ${META_JSON} | sort -u
	exit 0
	;;
    'types-brands')
	$JQ -r '.images[] | .type+"|"+.brand' ${META_JSON} | sort -u
	exit 0
	;;
    'brands-types')
	$JQ -r '.images[] | .brand+"|"+.type' ${META_JSON} | sort -u
	exit 0
	;;
    'describe')
	IMGNAME=$1
	if [ -z "${IMGNAME}" ]; then
	    exit 1
	fi
	cat ${META_JSON} | $JQ ".images[] | select(.version == \"${IMGNAME}\") |.description"
	exit 0
	;;
esac

#
# now for the main helper, which requires an image specifier
#
IMGNAME=$1
if [ -z "${IMGNAME}" ]; then
    exit 1
fi
#
# there may be multiple images, identified by date
# assume that text sort gives the order we want
#
case $TYPE in
    'lx'|'lx-image')
	DLNAME=$($JQ -r ".images[] | select(.type == \"lx-image\")| select(.version == \"${IMGNAME}\") | .path" ${META_JSON} | sort -r | head -1)
	CKVAL=$($JQ -r ".images[] | select(.type == \"lx-image\")| select(.path == \"${DLNAME}\") | .sha256" ${META_JSON})
	;;
    'disk'|'disk-image')
	DLNAME=$($JQ -r ".images[] | select(.type == \"disk-image\")| select(.version == \"${IMGNAME}\") | .path" ${META_JSON} | sort -r | head -1)
	CKVAL=$($JQ -r ".images[] | select(.type == \"disk-image\")| select(.path == \"${DLNAME}\") | .sha256" ${META_JSON})
	;;
    'bhyve'|'bhyve-image')
	DLNAME=$($JQ -r ".images[] | select(.type == \"bhyve-image\") | select(.version == \"${IMGNAME}\") | .path" ${META_JSON} | sort -r | head -1)
	CKVAL=$($JQ -r ".images[] | select(.type == \"bhyve-image\") | select(.path == \"${DLNAME}\") | .sha256" ${META_JSON})
	;;
    'alien'|'illumos'|'illumos-dataset')
	DLNAME=$($JQ -r ".images[] | select(.type == \"illumos-dataset\") | select(.version == \"${IMGNAME}\") | .path" ${META_JSON} | sort -r | head -1)
	CKVAL=$($JQ -r ".images[] | select(.type == \"illumos-dataset\") | select(.path == \"${DLNAME}\") | .sha256" ${META_JSON})
	;;
    *)
	# type not specified or recognised
	echo "ERROR: invalid type specified"
	exit 1
	;;
esac
if [ -z "${DLNAME}" ]; then
    echo "ERROR: unrecognized image"
    exit 1
fi
DLFILE=${DLNAME##*/}
FDLNAME=${IMAGE_DIR}/${DLFILE}

#
# now we have the image properties
#
# these are the helper functions for retrieve-image, the first argument
# we're called with is the MODE which can be mapname, query-download,
# or download
#
case $SUBCMD in
    'mapname')
	echo "$FDLNAME"
	;;
    'query-download')
	if [ -f "$FDLNAME" ]; then
	    echo "$FDLNAME"
	fi
	;;
    'download')
	#
	# check if we already have it and the checksum matches
	# if mismatched, delete it and download again
	#
	if [ -f "${FDLNAME}" ]; then
	    DLVAL=$(/usr/bin/digest -a sha256 "$FDLNAME")
	    if [ "${DLVAL}" != "${CKVAL}" ]; then
		rm -f "$FDLNAME"
	    else
		echo "$FDLNAME"
		exit 0
	    fi
	fi
	${WCLIENT} ${WARGS} "${FDLNAME}" "${DLPREFIX}${DLNAME}"
	if [ ! -f "${FDLNAME}" ]; then
	    echo "ERROR: download failed"
	    exit 1
	fi
	if [ ! -s "${FDLNAME}" ]; then
	    echo "ERROR: download file is empty"
	    /usr/bin/rm -f "${FDLNAME}"
	    exit 1
	fi
	DLVAL=$(/usr/bin/digest -a sha256 "$FDLNAME")
	if [ "${DLVAL}" != "${CKVAL}" ]; then
	    echo "ERROR: checksum mismatch"
	    exit 1
	fi
	echo "$FDLNAME"
	;;
esac
