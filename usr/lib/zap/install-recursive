#!/bin/ksh
#
# SPDX-License-Identifier: CDDL-1.0
#
# {{{ CDDL HEADER
#
# This file and its contents are supplied under the terms of the
# Common Development and Distribution License ("CDDL"), version 1.0.
# You may only use this file in accordance with the terms of version
# 1.0 of the CDDL.
#
# A full copy of the text of the CDDL should have accompanied this
# source. A copy of the CDDL is also available via the Internet at
# http://www.illumos.org/license/CDDL.
#
# }}}
#
# Copyright 2025 Peter Tribble
#

#
# install the given package and all its dependencies
#
# needs to deal with broken, incorrect, and circular dependencies
# needs to guarantee to converge
#
ZAPLIBDIR="/usr/lib/zap"
ODIR="/var/sadm/overlays"
INSTODIR="${ODIR}"
CTXARGS=""
DESTROOT=""
SRCARGS=""

#
# we need tsort to install in dependency order
# coreutils is in the base overlay, so it should be installed
# fall back on the one in SUNWcs (originally in TRIBdev-object-file)
# which is in core-tribblix
#
TSORT="/usr/gnu/bin/tsort"
if [ ! -x "${TSORT}" ]; then
    TSORT="/usr/bin/tsort"
fi
if [ ! -x "${TSORT}" ]; then
    #
    # something has gone horribly wrong, attempt to recover by
    # installing coreutils, in the current context
    #
    echo "ERROR: tsort missing, installing TRIBfile-gnu-coreutils"
    ${ZAPLIBDIR}/install-pkg TRIBfile-gnu-coreutils
    TSORT="/usr/gnu/bin/tsort"
fi
if [ ! -x "${TSORT}" ]; then
    #
    # horribly wrong doesn't cover it, but we need to make the best
    # possible effort so that we can install something
    #
    echo "ERROR: tsort still missing, continuing in degraded mode"
    TSORT="cat"
fi

case $1 in
-C)
	DESTROOT="$2"
	CTXARGS="-C ${DESTROOT}"
	shift
	shift
	if [ ! -d "$DESTROOT" ]; then
	    echo "ERROR: alternate root $DESTROOT doesn't exist"
	    exit 1
	fi
	if [ ! -d "$DESTROOT/var/sadm/pkg" ]; then
	    echo "ERROR: alternate root $DESTROOT is invalid"
	    exit 1
	fi
	INSTODIR="${DESTROOT}/${ODIR}"
	OVLARGS="-C ${DESTROOT}"
	;;
esac

case $1 in
-R)
	DESTROOT="$2"
	shift
	shift
	if [ ! -d "$DESTROOT" ]; then
	    echo "ERROR: alternate root $DESTROOT doesn't exist"
	    exit 1
	fi
	if [ ! -d "$DESTROOT/var/sadm/pkg" ]; then
	    echo "ERROR: alternate root $DESTROOT is invalid"
	    exit 1
	fi
	INSTODIR="${DESTROOT}/${ODIR}"
	OVLARGS="-R ${DESTROOT}"
	;;
esac

case $1 in
-s)
	SRCARGS="-s $2"
	shift
	shift
	;;
esac

case $# in
0)
	echo "Usage: $0 [-R alt-root] [ -s source] package [package...]"
	exit 2
	;;
esac

#
# if we're passed an overlay, treat it as such
#
for ovl in "$@"
do
    if [ -f "${INSTODIR}/${ovl}.ovl" ]; then
	if [ ! -f "${INSTODIR}/installed/${ovl}" ]; then
	    echo "Installing matching overlay $ovl"
	    ${ZAPLIBDIR}/install-overlay ${OVLARGS} ${SRCARGS} "$ovl"
	fi
    fi
done

#
# avoid having to look up information repeatedly
#
typeset -A depmap

#
# anything left has to be a package
#
pkglist=""
for pkg in $(${ZAPLIBDIR}/resolve-alias ${CTXARGS} "$@")
do
  if [ -f "${DESTROOT}/var/sadm/pkg/${pkg}/pkginfo" ]; then
    echo "Package $pkg already installed"
  else
    pkglist="${pkglist} $pkg"
  fi
done

if [ -z "${pkglist}" ]; then
  echo "Nothing to install"
  exit 0
fi

echo "Recursive install of: ${pkglist}"

#
# filter out invalid packages
# TODO: merge with loop above?
#
npkglist=""
for inpkg in $pkglist
do
    fpkg=$(${ZAPLIBDIR}/get-version ${CTXARGS} "$inpkg")
    if [ "X$fpkg" != "X$inpkg" ]; then
	npkglist="${npkglist} $inpkg"
    else
	if [ -f "${INSTODIR}/${inpkg}.ovl" ]; then
	    echo "Skipping overlay $inpkg"
	else
	    echo "Invalid package $inpkg"
	    ${ZAPLIBDIR}/psearch "$inpkg"
	fi
    fi
done

if [ -z "${npkglist}" ]; then
  echo "Nothing to install"
  exit 0
fi

#
# now walk dependencies
# just keep doing this until the list stops growing
#
ipass=0
ntostudy=0
ntoinstall=1
while [[ $ntostudy != $ntoinstall ]]
do
    echo "Resolving dependencies, pass ${ipass}"
    nnpkglist="${npkglist}"
    for inpkg in $npkglist
    do
	if [ -z "${depmap[$inpkg]}" ]; then
	    fpkg=$(${ZAPLIBDIR}/get-dependencies ${CTXARGS} -c "$inpkg")
	    depmap[$inpkg]=$fpkg
	else
	    fpkg=${depmap[$inpkg]}
	fi
	nnpkglist="${nnpkglist} ${fpkg}"
    done
    ntostudy=$ntoinstall
    npkglist=$(echo $nnpkglist | tr ' ' '\n' | sort -u)
    ntoinstall=$(echo $npkglist|wc -w)
    ipass=$((ipass+1))
done
ntoinstall=$(( ntoinstall ))

#
# now we've constructed the list of packages, we need to sort them
# in dependency order, so for each dependency we emit the dependency
# followed by the package depending on it, which is the order they
# need to be installed in, and then use tsort to construct the final
# list
#
gensort() {
for newpkg in $npkglist
do
    for dpkg in ${depmap[$newpkg]}
    do
	echo ${dpkg} ${newpkg}
    done
done | $TSORT
}

echo "\nInstalling ${ntoinstall} packages:\n${npkglist}\n"

${ZAPLIBDIR}/install-pkg ${CTXARGS} ${SRCARGS} $(gensort)
