#!/bin/ksh
#
# SPDX-License-Identifier: CDDL-1.0
#
# {{{ CDDL HEADER
#
# This file and its contents are supplied under the terms of the
# Common Development and Distribution License ("CDDL"), version 1.0.
# You may only use this file in accordance with the terms of version
# 1.0 of the CDDL.
#
# A full copy of the text of the CDDL should have accompanied this
# source. A copy of the CDDL is also available via the Internet at
# http://www.illumos.org/license/CDDL.
#
# }}}
#
# Copyright 2025 Peter Tribble
#

#
# an operating system image retrieval script
#
# used for:
#  - alien zone images
#  - lx zone images
#  - an alien os installer
#
# it will output either the name of the resulting file
# or something containing "ERROR:"
#

ZAPLIBDIR="/usr/lib/zap"
MODE="download"
#
# checksum naming:
# if it's saved as XXX.sha256 then it's a single checksum
# if it's saved as XXX.sha256.txt then it's a list of checksums
#
CKURL=""
CKNAME=""

#
# with -n, just print out the final image name we would store
# with -q, print out the file name iff already downloaded
#
case $1 in
    -n)
	MODE="mapname"
	shift
	;;
    -q)
	MODE="query-download"
	shift
	;;
esac

if [ $# -ne 1 ]; then
    echo "Usage: $0 [-n | -q] image_specifier"
    exit 2
fi

IMAGE_DIR=$(${ZAPLIBDIR}/zap-cfg image-dir)
USER_AGENT="zap"/$(${ZAPLIBDIR}/zap-cfg pkgversion)
ZAP_PROXY=$(${ZAPLIBDIR}/zap-cfg proxy)

if [ -n "$ZAP_PROXY" ]; then
    http_proxy=$ZAP_PROXY
    export http_proxy
fi

WCLIENT=/usr/bin/curl
WARGS="-A ${USER_AGENT} -f -s -o"
if [ ! -x $WCLIENT ]; then
    WCLIENT=/usr/bin/wget
    WARGS="-U ${USER_AGENT} -q -O"
fi
if [ ! -x $WCLIENT ]; then
    WCLIENT=/usr/bin/wget2
    WARGS="-U ${USER_AGENT} -q -O"
fi

#
# we understand several schemes
# - http/https - direct download, gives the full URL
# - distro-name - maps to a well-known url prefix and suffix
#   and the argument is of the form distro-name:version
#
SCHEME=${1%%:*}

case $SCHEME in
    http|https)
	URL="$1"
	DLNAME=${1##*/}
	;;
    omnios|omniosce)
	DLPREFIX="https://downloads.omnios.org/media/"
	DLSUFFIX=".zfs.xz"
	#
	# we expect a marker of the form r1510XX[y] or bloody
	#
	RELVER=${1#*:}
	#
	# updates have letters on the end as subscripts
	# so pick off the directory name without the subscripts
	#
	case $RELVER in
	    bloody*)
		RELDIR="bloody"
		;;

	    stable)
		RELDIR="r151054"
		RELVER="r151054"
		;;
	    lts)
		RELDIR="r151054"
		RELVER="r151054"
		;;
	    *)
		RELDIR=${RELVER:0:7}
		;;
	esac
	DLNAME="omnios-${RELVER}${DLSUFFIX}"
	URL="${DLPREFIX}${RELDIR}/${DLNAME}"
	CKURL="${DLPREFIX}${RELDIR}/${DLNAME}.sha256"
	CKNAME="${DLNAME}.sha256"
	;;
    oi|openindiana)
	DLPREFIX="https://dlc.openindiana.org/isos/hipster/"
	DLSUFFIX=".iso"
	RELVER="20241026"
	RELDIR="${RELVER}"
	#https://dlc.openindiana.org/isos/hipster/20230502/OI-hipster-gui-20230502.iso
	# we expect a marker of the form gui|text|minimal|img
	#
	RELTYPE=${1#*:}
	#
	# extract the variant
	#
	case $RELTYPE in
	    gui|text|minimal)
		DLNAME="OI-hipster-${RELTYPE}-${RELVER}.iso"
		;;
	    img)
		DLNAME="OI-hipster-cloudimage.img.zstd"
		;;
	    *)
		echo "ERROR: Expected openindiana:gui|text|minimal|img"
		exit 2
		;;
	esac
	URL="${DLPREFIX}${RELDIR}/${DLNAME}"
	CKURL="${DLPREFIX}${RELDIR}/${DLNAME}.sha256sum"
	CKNAME="${DLNAME}.sha256"
	;;
    tribblix)
	DLPREFIX="https://pkgs.tribblix.org/iso/"
	DLSUFFIX=".iso"
	TRIBTYPE="tribblix"
	#
	# we expect a marker of the form m##[.#] or m##lx[.#]
	#
	RELVER=${1#*:}
	#
	# allow specification without the leading 0
	#
	case $RELVER in
	    m*)
		RELVER="0${RELVER}"
		;;
	esac
	case $RELVER in
	    *lx*)
		TRIBTYPE="omnitribblix"
		;;
	esac
	DLNAME="${TRIBTYPE}-${RELVER}${DLSUFFIX}"
	URL="${DLPREFIX}/${DLNAME}"
	CKURL="${DLPREFIX}/${DLNAME}.sha256"
	CKNAME="${DLNAME}.sha256"
	;;
    ubuntu)
	#
	# these are the cloud images https://cloud-images.ubuntu.com/
	#
	# syntax expected is 'ubuntu:YY.MM'
	#
	# we remove releases that are end of life
	#
	DLPREFIX="https://cloud-images.ubuntu.com/releases/"
	DLSUFFIX=".tar.xz"
	RELVER=${1#*:}
	case $RELVER in
	    trusty)
		RELVER="14.04"
		;;
	    xenial)
		RELVER="16.04"
		;;
	    bionic)
		RELVER="18.04"
		;;
	    focal)
		RELVER="20.04"
		;;
	    jammy)
		RELVER="22.04"
		;;
	    kinetic)
		RELVER="22.10"
		;;
	    lunar)
		RELVER="23.04"
		;;
	    mantic)
		RELVER="23.10"
		;;
	    noble)
		RELVER="24.04"
		;;
	    *.*)
		:
		;;
	    *)
		RELVER="22.04"
		;;
	esac
	URL="${DLPREFIX}${RELVER}/release/ubuntu-${RELVER}-server-cloudimg-amd64-root${DLSUFFIX}"
	CKURL="${DLPREFIX}${RELVER}/release/SHA256SUMS"
	DLNAME="ubuntu-${RELVER}-server-cloudimg-amd64-root${DLSUFFIX}"
	CKNAME="${DLNAME}.sha256.txt"
	;;
    proxmox)
	#
	# system images come from http://download.proxmox.com/images/system/
	#
	# syntax expected is 'proxmox:distro-version'
	# which we map (manually) to a filename
	#
	# there is no mechanism to handle images which have since been
	# removed from the proxmox site
	#
	# nor is there a mechanism to handle images which have been
	# replaced by newer versions
	#
	DLPREFIX="http://download.proxmox.com/images/system/"
	RELVER=${1#*:}
	case $RELVER in
	    alma8|almalinux8)
		DLFILE="almalinux-8-default_20210928_amd64.tar.xz"
		DLNAME="proxmox-almalinux-8.tar.xz"
		;;
	    alma|almalinux|almalinux9)
		DLFILE="almalinux-9-default_20240911_amd64.tar.xz"
		DLNAME="proxmox-almalinux-9.tar.xz"
		;;
	    alpine-3.13)
		DLFILE="alpine-3.13-default_20210419_amd64.tar.xz"
		DLNAME="proxmox-alpine-3.13.tar.xz"
		;;
	    alpine-3.14)
		DLFILE="alpine-3.14-default_20210623_amd64.tar.xz"
		DLNAME="proxmox-alpine-3.14.tar.xz"
		;;
	    alpine-3.15)
		DLFILE="alpine-3.15-default_20211202_amd64.tar.xz"
		DLNAME="proxmox-alpine-3.15.tar.xz"
		;;
	    alpine-3.16)
		DLFILE="alpine-3.16-default_20220622_amd64.tar.xz"
		DLNAME="proxmox-alpine-3.16.tar.xz"
		;;
	    alpine-3.17)
		DLFILE="alpine-3.17-default_20221129_amd64.tar.xz"
		DLNAME="proxmox-alpine-3.17.tar.xz"
		;;
	    alpine-3.18|alpine)
		DLFILE="alpine-3.18-default_20230607_amd64.tar.xz"
		DLNAME="proxmox-alpine-3.18.tar.xz"
		;;
	    alpine-3.19)
		DLFILE="alpine-3.19-default_20240207_amd64.tar.xz"
		DLNAME="proxmox-alpine-3.19.tar.xz"
		;;
	    alpine-3.20)
		DLFILE="alpine-3.20-default_20240908_amd64.tar.xz"
		DLNAME="proxmox-alpine-3.20.tar.xz"
		;;
	    alpine-3.21)
		DLFILE="alpine-3.21-default_20241217_amd64.tar.xz"
		DLNAME="proxmox-alpine-3.21.tar.xz"
		;;
	    alpine-3.22)
		DLFILE="alpine-3.22-default_20250617_amd64.tar.xz"
		DLNAME="proxmox-alpine-3.22.tar.xz"
		;;
	    arch|archlinux)
		DLFILE="archlinux-base_20240911-1_amd64.tar.zst"
		DLNAME="proxmox-archlinux.tar.zst"
		echo "WARN: arch is not supported by the LX brand"
		;;
	    centos-7|centos)
		DLFILE="centos-7-default_20190926_amd64.tar.xz"
		DLNAME="proxmox-centos-7.tar.xz"
		;;
	    centos-8)
		DLFILE="centos-8-default_20201210_amd64.tar.xz"
		DLNAME="proxmox-centos-8.tar.xz"
		;;
	    centos-9|centos-9-stream)
		DLFILE="centos-9-stream-default_20240828_amd64.tar.xz"
		DLNAME="proxmox-centos-9.tar.xz"
		;;
	    debian-10)
		DLFILE="debian-10-standard_10.7-1_amd64.tar.gz"
		DLNAME="proxmox-debian-10.tar.gz"
		;;
	    debian-11)
		DLFILE="debian-11-standard_11.7-1_amd64.tar.zst"
		DLNAME="proxmox-debian-11.tar.zst"
		;;
	    debian-12|debian)
		DLFILE="debian-12-standard_12.7-1_amd64.tar.zst"
		DLNAME="proxmox-debian-12.tar.zst"
		;;
	    devuan-3)
		DLFILE="devuan-3.0-standard_3.0_amd64.tar.gz"
		DLNAME="proxmox-devuan-3.tar.gz"
		;;
	    devuan-4)
		DLFILE="devuan-4.0-standard_4.0_amd64.tar.gz"
		DLNAME="proxmox-devuan-4.tar.gz"
		;;
	    devuan|devuan-5)
		DLFILE="devuan-5.0-standard_5.0_amd64.tar.gz"
		DLNAME="proxmox-devuan-5.tar.gz"
		;;
	    fedora-33)
		DLFILE="fedora-33-default_20201115_amd64.tar.xz"
		DLNAME="proxmox-fedora-33.tar.xz"
		;;
	    fedora-34)
		DLFILE="fedora-34-default_20210427_amd64.tar.xz"
		DLNAME="proxmox-fedora-34.tar.xz"
		;;
	    fedora-38|fedora)
		DLFILE="fedora-38-default_20230607_amd64.tar.xz"
		DLNAME="proxmox-fedora-38.tar.xz"
		;;
	    fedora-39)
		DLFILE="fedora-39-default_20231118_amd64.tar.xz"
		DLNAME="proxmox-fedora-39.tar.xz"
		;;
	    fedora-40)
		DLFILE="fedora-40-default_20240909_amd64.tar.xz"
		DLNAME="proxmox-fedora-40.tar.xz"
		;;
	    fedora-41)
		DLFILE="fedora-41-default_20241118_amd64.tar.xz"
		DLNAME="proxmox-fedora-41.tar.xz"
		;;
	    fedora-42)
		DLFILE="fedora-42-default_20250428_amd64.tar.xz"
		DLNAME="proxmox-fedora-42.tar.xz"
		;;
	    gentoo)
		DLFILE="gentoo-current-openrc_20250508_amd64.tar.xz"
		DLNAME="proxmox-gentoo.tar.xz"
		echo "WARN: gentoo is not supported by the LX brand"
		;;
	    opensuse-15|opensuse)
		DLFILE="opensuse-15.6-default_20240910_amd64.tar.xz"
		DLNAME="proxmox-opensuse-15.tar.xz"
		;;
	    rocky8|rockylinux8)
		DLFILE="rockylinux-8-default_20210929_amd64.tar.xz"
		DLNAME="proxmox-rockylinux-8.tar.xz"
		;;
	    rocky|rockylinux|rocky9|rockylinux9)
		DLFILE="rockylinux-9-default_20240912_amd64.tar.xz"
		DLNAME="proxmox-rockylinux-9.tar.xz"
		;;
	    ubuntu-*)
		UVER=${RELVER:7:11}
		#
		# LTS releases might have updates
		#
		EXT="gz"
		UUVER=""
		UUREL="1"
		case $UVER in
		    16.04)
			UUVER=".5"
			;;
		    18.04)
			UUVER=".1"
			;;
		    22.04|23.10|24.10)
			EXT="zst"
			;;
		    24.04)
			EXT="zst"
			UUREL="2"
			;;
		    25.04)
			EXT="zst"
			UUREL="1.1"
			;;
		esac
		DLFILE="ubuntu-${UVER}-standard_${UVER}${UUVER}-${UUREL}_amd64.tar.${EXT}"
		DLNAME="proxmox-ubuntu-${UVER}.tar.${EXT}"
		;;
	    ubuntu)
		UVER="22.04"
		UUVER=""
		DLFILE="ubuntu-${UVER}-standard_${UVER}${UUVER}-1_amd64.tar.zst"
		DLNAME="proxmox-ubuntu-${UVER}.tar.zst"
		;;
	    *)
		echo "ERROR: Unknown proxmox image"
		exit 2
		;;
	esac
	URL="${DLPREFIX}${DLFILE}"
	;;
    netboot|netboot.zyz)
	URL="https://boot.netboot.xyz/ipxe/netboot.xyz.iso"
	DLNAME="netboot.xyz.iso"
	;;
    lx)
	#
	# delegate to the omni-retrieve-image helper
	#
	exec ${ZAPLIBDIR}/omni-retrieve-image "${MODE}" -t lx "${1#*:}"
	;;
    *)
	echo "ERROR: Unrecognized scheme"
	exit 2
	;;
esac

#
# fully qualify the path names
#
FDLNAME=${IMAGE_DIR}/${DLNAME}
if [ -n "$CKNAME" ]; then
    CKNAME=${IMAGE_DIR}/${CKNAME}
fi

case $MODE in
    'mapname')
	echo "$FDLNAME"
	;;
    'query-download')
	if [ -f "$FDLNAME" ]; then
	    echo "$FDLNAME"
	fi
	;;
    'download')
	#
	# get the checksum file first, and exit if that fails
	#
	if [ -n "$CKNAME" ]; then
	    if [ ! -s "${CKNAME}" ]; then
		${WCLIENT} ${WARGS} "${CKNAME}" "${CKURL}"
	    fi
	    if [ ! -f "${CKNAME}" ]; then
		echo "ERROR: unable to retrieve checksum file"
		exit 1
	    fi
	    if [ ! -s "${CKNAME}" ]; then
		echo "ERROR: checksum file is empty"
		/usr/bin/rm -f "${CKNAME}"
		exit 1
	    fi
	fi
	${WCLIENT} ${WARGS} "${FDLNAME}" "${URL}"
	if [ ! -f "${FDLNAME}" ]; then
	    echo "ERROR: download failed"
	    exit 1
	fi
	if [ ! -s "${FDLNAME}" ]; then
	    echo "ERROR: download file is empty"
	    /usr/bin/rm -f "${FDLNAME}"
	    exit 1
	fi
	if [ -n "$CKNAME" ]; then
	    case $CKNAME in
		*.txt)
		    CKSCHEME=${CKNAME%%.txt}
		    CKSCHEME=${CKSCHEME##*.}
		    CKVAL=$(/usr/bin/grep "$DLNAME" "$CKNAME" | /usr/bin/tr ' ' '\n'|/usr/bin/grep -v "$DLNAME")
		    ;;
		*)
		    CKSCHEME=${CKNAME##*.}
		    CKVAL=$(/usr/bin/awk '{print $1}' "$CKNAME")
		    ;;
	    esac
	    DLVAL=$(/usr/bin/openssl "$CKSCHEME" "$FDLNAME" | /usr/bin/awk '{print $NF}')
	    if [ "${DLVAL}" != "${CKVAL}" ]; then
		echo "ERROR: checksum mismatch"
		exit 1
	    fi
	fi
	echo "$FDLNAME"
	;;
esac
