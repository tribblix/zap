#!/bin/ksh
#
# SPDX-License-Identifier: CDDL-1.0
#
# {{{ CDDL HEADER
#
# This file and its contents are supplied under the terms of the
# Common Development and Distribution License ("CDDL"), version 1.0.
# You may only use this file in accordance with the terms of version
# 1.0 of the CDDL.
#
# A full copy of the text of the CDDL should have accompanied this
# source. A copy of the CDDL is also available via the Internet at
# http://www.illumos.org/license/CDDL.
#
# }}}
#
# Copyright 2025 Peter Tribble
#

#
# This sets up the global zone like a router zone
#
# The necessity for this is where you have a system with a single
# external IP address. A router zone would have its own external
# address.
#
# Usage:
#  -R Ipv4 network to proxy, in CIDR notation
#

#
# this sort of looks like a zone configuration
#
ZSDIR="/var/zap/zones"
ZNAME="global"
RIP4=""
NRIP4=""
ORIP4=""
ISROUTER="y"

#
# these associative arrays track the interface to address mapping
#
typeset -A ifipmap

usage() {
    echo "Usage: $0 -R ip_network/prefix"
    exit 2
}

while getopts "R:" opt; do
case $opt in
R)
	RIP4="${RIP4} $OPTARG"
	;;
*)
	usage
	;;
esac
done

#
# we must be given the network to route
#
if [ -z "$RIP4" ]; then
    usage
fi

#
# for any routing/proxy, verify we're being given sensible information
# It must look like a.b.c.d/n, and d must be zero
# rewrite addresses from the network address to the host address of .1
# check no other zone is routing this network
#
if [[ -n $RIP4 ]]; then
    for RIP in $RIP4
    do
	case $RIP in
	    *.*.*.*.*)
		echo "Invalid proxy network $RIP"
		echo "  Expected a.b.c.d/prefix"
		exit 2
		;;
	    */*/*)
		echo "Invalid proxy network $RIP"
		echo "  Expected a.b.c.d/prefix"
		exit 2
		;;
	    *.*.*.*/*)
		RPREFIX=${RIP##*/}
		RSUBNET=${RIP%/*}
		echo "$RSUBNET" | tr '.' ' '|read -r OCT1 OCT2 OCT3 OCT4
		if [ "$OCT1" -lt 1 -o "$OCT1" -gt 223 ]; then
		    echo "Invalid proxy network $RIP"
		    echo "  first octet $OCT1 out of range"
		    exit 2
		fi
		if [ "$OCT2" -lt 0 -o "$OCT2" -gt 255 ]; then
		    echo "Invalid proxy network $RIP"
		    echo "  second octet $OCT2 out of range"
		    exit 2
		fi
		if [ "$OCT3" -lt 0 -o "$OCT3" -gt 255 ]; then
		    echo "Invalid proxy network $RIP"
		    echo "  third octet $OCT3 out of range"
		    exit 2
		fi
		if [ "$OCT4" -ne 0 ]; then
		    echo "Invalid proxy network $RIP"
		    echo "  fourth octet $OCT4 out of range, must be 0"
		    exit 2
		fi
		case $RPREFIX in
		    8)
			if [ "$OCT2" -ne 0 ]; then
			    echo "Invalid proxy network $RIP"
			    echo "  second octet $OCT2 out of range, must be zero for /8"
			    exit 2
			fi
			if [ "$OCT3" -ne 0 ]; then
			    echo "Invalid proxy address $RIP"
			    echo "  third octet $OCT3 out of range, must be zero for /8"
			    exit 2
			fi
			if [ -f "${ZSDIR}/rconfig.${OCT1}" ]; then
			    ZOWNER=$(/usr/bin/grep zone: "${ZSDIR}/rconfig.${OCT1}" | /usr/bin/awk '{print $NF}')
			    echo "ERROR: network $RIP is already in use by zone $ZOWNER"
			    exit 2
			fi
			NRIP4="$NRIP4 ${OCT1}.${OCT2}.${OCT3}.1/${RPREFIX}"
			;;
		    16)
			if [ "$OCT3" -ne 0 ]; then
			    echo "Invalid proxy address $RIP"
			    echo "  third octet $OCT3 out of range, must be zero for /16"
			    exit 2
			fi
			if [ -f "${ZSDIR}/rconfig.${OCT1}" ]; then
			    ZOWNER=$(/usr/bin/grep zone: "${ZSDIR}/rconfig.${OCT1}" | /usr/bin/awk '{print $NF}')
			    echo "ERROR: parent network ${OCT1}.0.0.0/8 for $RIP is already in use by zone $ZOWNER"
			    exit 2
			fi
			if [ -f "${ZSDIR}/rconfig.${OCT1}.${OCT2}" ]; then
			    ZOWNER=$(/usr/bin/grep zone: "${ZSDIR}/rconfig.${OCT1}.${OCT2}" | /usr/bin/awk '{print $NF}')
			    echo "ERROR: network $RIP is already in use by zone $ZOWNER"
			    exit 2
			fi
			NRIP4="$NRIP4 ${OCT1}.${OCT2}.${OCT3}.1/${RPREFIX}"
			;;
		    24)
			if [ -f "${ZSDIR}/rconfig.${OCT1}" ]; then
			    ZOWNER=$(/usr/bin/grep zone: "${ZSDIR}/rconfig.${OCT1}" | /usr/bin/awk '{print $NF}')
			    echo "ERROR: parent network ${OCT1}.0.0.0/8 for $RIP is already in use by zone $ZOWNER"
			    exit 2
			fi
			if [ -f "${ZSDIR}/rconfig.${OCT1}.${OCT2}" ]; then
			    ZOWNER=$(/usr/bin/grep zone: "${ZSDIR}/rconfig.${OCT1}.${OCT2}" | /usr/bin/awk '{print $NF}')
			    echo "ERROR: parent network ${OCT1}.${OCT2}.0.0/16 for $RIP is already in use by zone $ZOWNER"
			    exit 2
			fi
			if [ -f "${ZSDIR}/rconfig.${OCT1}.${OCT2}.${OCT3}" ]; then
			    ZOWNER=$(/usr/bin/grep zone: "${ZSDIR}/rconfig.${OCT1}.${OCT2}.${OCT3}" | /usr/bin/awk '{print $NF}')
			    echo "ERROR: network $RIP is already in use by zone $ZOWNER"
			    exit 2
			fi
			NRIP4="$NRIP4 ${OCT1}.${OCT2}.${OCT3}.1/${RPREFIX}"
			;;
		    *)
			echo "Invalid proxy prefix /$RPREFIX"
			echo "  Supported values: /8 /16 /24"
			exit 2
			;;
		esac
		;;
	    *)
		echo "Invalid proxy address $RIP"
		echo "  Expected a.b.c.d/prefix"
		exit 2
		;;
	esac
    done
    ORIP4=$RIP4
    RIP4=$NRIP4
fi

#
# return the short form of the network address - just the significant octets
# we only support /8 /16 /24 for router/proxy zones so no need to check
#
get_short_net() {
    IIP=$1
    SRPREFIX=${IIP##*/}
    SRSUBNET=${IIP%/*}
    echo "$SRSUBNET" | tr '.' ' '|read -r OCT1 OCT2 OCT3 OCT4
    case $SRPREFIX in
	8)
	    echo "${OCT1}"
	    ;;
	16)
	    echo "${OCT1}.${OCT2}"
	    ;;
	24)
	    echo "${OCT1}.${OCT2}.${OCT3}"
	    ;;
    esac
}

#
# For router/proxy zones we create an etherstub for the internal virtual
# network, and create a vnic over that etherstub. The router/proxy zone
# will have the matching .1 address on that network. We also create an
# extra vnic that can be used to connect shared-ip zones to the internal
# network, as they need some form of link to run over
#
# the naming convention is that vnics attached to zones are called znic,
# while the shared vnics are called snic
#
# Note that the destroy script must have been initialized above as we
# require a router/proxy zone to have an exclusive-ip address, and we
# carry on enumerating ZENUM where we left off
#
ZRNUM=0
ZSNUM=0
ZENUM=$((ZENUM+1))
for IP in $RIP4
do
	/usr/sbin/dladm show-etherstub "zrstub$ZRNUM" > /dev/null 2>&1
	ZRSTATUS=$?
	while [ $ZRSTATUS -eq 0 ]
	do
	    ZRNUM=$((ZRNUM+1))
	    /usr/sbin/dladm show-etherstub "zrstub$ZRNUM" > /dev/null 2>&1
	    ZRSTATUS=$?
	done
	ZIFACE=zrstub$ZRNUM
	/usr/sbin/dladm create-etherstub "$ZIFACE"
	#
	# create the vnic attached to the router/proxy zone that's
	# connected to the routed subnet
	#
	/usr/sbin/dladm show-vnic "znic$ZENUM" > /dev/null 2>&1
	ZESTATUS=$?
	while [ $ZESTATUS -eq 0 ]
	do
	    ZENUM=$((ZENUM+1))
	    /usr/sbin/dladm show-vnic "znic$ZENUM" > /dev/null 2>&1
	    ZESTATUS=$?
	done
	/usr/sbin/dladm create-vnic -l "$ZIFACE" "znic$ZENUM"
	echo "/usr/sbin/dladm delete-vnic znic$ZENUM" >> "${ZSDIR}/destroy.${ZNAME}"
	#
	# create the second vnic connected to the routed subnet
	# that can be used for shared-ip zones
	#
	# this vnic must have an IP interface enabled (ie plumbed) in
	# the global zone but doesn't need an address configured, and
	# it won't be associated with any zones at this point
	#
	/usr/sbin/dladm show-vnic "snic$ZSNUM" > /dev/null 2>&1
	ZSSTATUS=$?
	while [ $ZSSTATUS -eq 0 ]
	do
	    ZSNUM=$((ZSNUM+1))
	    /usr/sbin/dladm show-vnic "snic$ZSNUM" > /dev/null 2>&1
	    ZSSTATUS=$?
	done
	/usr/sbin/dladm create-vnic -l "$ZIFACE" "snic$ZSNUM"
	/usr/sbin/ipadm create-if "snic$ZSNUM"
	echo "/usr/sbin/ipadm delete-if snic$ZSNUM" >> "${ZSDIR}/destroy.${ZNAME}"
	echo "/usr/sbin/dladm delete-vnic snic$ZSNUM" >> "${ZSDIR}/destroy.${ZNAME}"
	#
	# delete the etherstub after the vnics configured on it
	#
	echo "/usr/sbin/dladm delete-etherstub $ZIFACE" >> "${ZSDIR}/destroy.${ZNAME}"
	ifipmap[znic$ZENUM]=$IP
	# save the configuration here
	ZNETNAME=$(get_short_net "$IP")
	touch "${ZSDIR}/rconfig.${ZNETNAME}"
	echo "interface: $ZIFACE" >> "${ZSDIR}/rconfig.${ZNETNAME}"
	echo "shared-interface: snic$ZSNUM" >> "${ZSDIR}/rconfig.${ZNETNAME}"
	echo "gateway: ${IP%/*}" >> "${ZSDIR}/rconfig.${ZNETNAME}"
	echo "zone: ${ZNAME}" >> "${ZSDIR}/rconfig.${ZNETNAME}"
	echo "rm ${ZSDIR}/rconfig.${ZNETNAME}" >> "${ZSDIR}/destroy.${ZNAME}"
done

#
# this is the primary external interface that we'll nat everything through
#
IFACE=$(/usr/sbin/route -n get default | /usr/bin/grep interface: | /usr/bin/awk '{print $NF}')

#
# for router/proxy zones:
#  ensure ipfilter is installed in the global zone
#  configure nat for all subnets
#  enable ip forwarding on all interfaces
#
if [[ -n $RIP4 ]]; then
    if [ ! -f /var/sadm/pkg/TRIBnet-ipfilter/pkginfo ]; then
	echo "Installing ipfilter in the global zone"
	/usr/bin/zap install TRIBnet-ipfilter
	sleep 1
    fi
    #
    # the external interface may be configured in many ways, not all of
    # which are classed as persistent, so always assume it's temporary
    # (For example, the default nwam creates a temporary object)
    # which means we need an rc script to restore it at boot
    # we use the same rc script to force other services up
    #
    /usr/sbin/ipadm set-ifprop -t -p forwarding=on -m ipv4 "$IFACE"
    echo "#!/bin/sh" > "/etc/rc3.d/S99global-router-$IFACE"
    echo "/usr/sbin/ipadm set-ifprop -t -p forwarding=on -m ipv4 $IFACE" >> "/etc/rc3.d/S99global-router-$IFACE"
    chmod a+x "/etc/rc3.d/S99global-router-$IFACE"
    for index in "${!ifipmap[@]}"
    do
	echo "Creating $index"
	/usr/sbin/ipadm create-if "$index"
	echo "/usr/sbin/ipadm enable-if $index" >> "/etc/rc3.d/S99global-router-$IFACE"
	echo "Adding address ${ifipmap[$index]}"
	/usr/sbin/ipadm create-addr -T static -a ${ifipmap[$index]}  ${index}/router
	echo "Enabling forwarding"
	/usr/sbin/ipadm set-ifprop -p forwarding=on -m ipv4 "$index"
    done
    echo "/usr/bin/rm -f /etc/rc3.d/S99global-router-$IFACE" >> "${ZSDIR}/destroy.${ZNAME}"
    echo "/usr/sbin/ipadm set-ifprop -t -p forwarding=off -m ipv4 $IFACE" >> "${ZSDIR}/destroy.${ZNAME}"
    touch /etc/ipf/ipnat.conf
    for subnet in $ORIP4
    do
	echo "map $IFACE $subnet -> 0/32 portmap tcp/udp auto" >> /etc/ipf/ipnat.conf
	echo "map $IFACE $subnet -> 0/32" >> /etc/ipf/ipnat.conf
    done
    #
    # this way round, so it only gets restarted once whether it's
    # running or not
    #
    /usr/sbin/svcadm restart network/ipfilter
    /usr/sbin/svcadm enable network/ipfilter
    echo "/usr/sbin/svcadm enable network/ipfilter" >> "/etc/rc3.d/S99global-router-$IFACE"
    #
    # we assume that this is the only reason to do nat
    #
    echo "/usr/bin/rm /etc/ipf/ipnat.conf" >> "${ZSDIR}/destroy.${ZNAME}"
    #
    # but we can't assume there are no other users of ipfilter, so we
    # can't shut it down when we get removed
    #
    echo "/usr/sbin/svcadm restart network/ipfilter" >> "${ZSDIR}/destroy.${ZNAME}"
fi

#
# for managed router zones only, set up dnsmasq as well
#
if [[ -n $ISROUTER ]]; then
    # dnsmasq.d is where specific host configuration will be placed
    echo "conf-dir=/etc/dnsmasq.d" > "/etc/dnsmasq.conf"
    # server starts as root, then changes uid, so this is the user to change to
    # running as user dnsmasq with privileges was tested and failed
    echo "user=dnsmasq" >> "/etc/dnsmasq.conf"
    # a dhcp-range entry is required to enable the dhcp server
    # all configuration is static, we fix the IP addresses
    for subnet in $ORIP4
    do
	echo "dhcp-range=${subnet%/*},static" >> "/etc/dnsmasq.conf"
    done
    echo "Starting dnsmasq"
    /usr/sbin/svcadm enable network/dnsmasq
fi
