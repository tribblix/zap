#!/bin/ksh
#
# SPDX-License-Identifier: CDDL-1.0
#
# {{{ CDDL HEADER
#
# This file and its contents are supplied under the terms of the
# Common Development and Distribution License ("CDDL"), version 1.0.
# You may only use this file in accordance with the terms of version
# 1.0 of the CDDL.
#
# A full copy of the text of the CDDL should have accompanied this
# source. A copy of the CDDL is also available via the Internet at
# http://www.illumos.org/license/CDDL.
#
# }}}
#
# Copyright 2025 Peter Tribble
#

#
# upgrade to a new version of Tribblix
#

ZAPLIBDIR="/usr/lib/zap"
CFGDIR="/etc/zap"
BEADM="/sbin/beadm"
ZFSCMD="/usr/sbin/zfs"
ACTIVATE="false"

#
# The general strategy here is:
#  beadm create newver
#  beadm mount newver /a
#  update zap on the new be
#  (in the new context) zap update-overlay -a
#  beadm activate newver
#  init 6
#

#
# The package TRIBzap-upgrade supplies the files
#  /etc/zap/version.list
#  /etc/zap/version.current
#

VLISTFILE="${CFGDIR}/version.list"
VINSTFILE="${CFGDIR}/version.current"

if [ ! -f "${VLISTFILE}" ]; then
   echo "ERROR: upgrade capability not present"
   exit 1
fi
if [ ! -f "${VINSTFILE}" ]; then
   echo "ERROR: upgrade capability not present"
   exit 1
fi
if [ ! -f "${BEADM}" ]; then
   echo "ERROR: upgrade capability not present, beadm missing"
   exit 1
fi

show_available() {
  INSTVER=$(cat $VINSTFILE)
  /usr/bin/awk -F'|' '{print $1,$2,$3}' $VLISTFILE | while read -r nver nurl ntext
  do
    if [ "X$nver" = "X$INSTVER" ]; then
      echo "${nver}: (current)"
    else
      echo "${nver}: $ntext"
    fi
  done
}

validate() {
  INSTVER=$(cat $VINSTFILE)
  /usr/bin/awk -F'|' '{print $1,$2}' $VLISTFILE | while read -r nver nurl
  do
    if [ "X$1" = "X$INSTVER" ]; then
      echo "ERROR: $1 is the current version"
      exit 1
    elif [ "X$nver" = "X$1" ]; then
      echo "$nurl"
      return
    fi
  done
  echo "ERROR: unrecognized version $1"
  exit 1
}

bail() {
  echo "$1"
  exit 1
}

case $# in
0)
  echo "Usage: zap upgrade [-B] new_version | list | current"
  exit 2
  ;;
esac

case $1 in
'list')
  show_available
  exit 0
  ;;
'current')
  cat $VINSTFILE
  exit 0
  ;;
esac

while getopts "B" opt; do
case $opt in
B)
  ACTIVATE="true"
  ;;
esac
done
shift $((OPTIND - 1))

#
# Beyond here is an upgrade, either real or dry-run
#
NEWVER="$1"

#
# validate the requested version, and get the corresponding URL
#
NEWURL=$(validate "$NEWVER") || bail "$NEWURL"

#
# before we do anything, apply any urgent fixes
#
# if metainit hangs around, it causes boot failures with varpd
# no system should really have this as a valid service
#
/usr/sbin/svccfg delete svc:/system/metainit:default > /dev/null 2>&1

#
# find the current BE and matching FS dataset
#
OLDBE=$($BEADM list -H | awk -F\; '{if ($3=="NR") print $1}')
OLDDS=$($BEADM list -Ha | awk -F\; '{if ($3=="NR") print $2}')
if [ -z "$OLDBE" ]; then
    echo "ERROR: Unable to find current BE name"
    exit 1
fi

#
# find a BE name that is unused
#
BENAME="$NEWVER"
$BEADM list "$BENAME" > /dev/null 2>&1
BESTATUS=$?
BENUM=0
while [ $BESTATUS -eq 0 ]
do
  BENUM=$((BENUM+1))
  BENAME="${NEWVER}-${BENUM}"
  $BEADM list "$BENAME" > /dev/null 2>&1
  BESTATUS=$?
done

WCLIENT=/usr/bin/curl
WARGS="-f -s -o"
if [ ! -x $WCLIENT ]; then
    WCLIENT=/usr/bin/wget
    WARGS="-q -O"
fi
if [ ! -x $WCLIENT ]; then
    WCLIENT=/usr/bin/wget2
    WARGS="-q -O"
fi

NPKG=${NEWURL##*/}
CACHE_DIR=$(${ZAPLIBDIR}/zap-cfg cache-dir)
${WCLIENT} ${WARGS} "${CACHE_DIR}/${NPKG}" "$NEWURL"
#
# if the download failed then we cannot progress any further
# depending on the download client we may get no file at all
# or a zero-length file
#
if [ ! -f "${CACHE_DIR}/${NPKG}" ]; then
    echo "ERROR: Unable to download the new release"
    exit 1
fi
if [ ! -s "${CACHE_DIR}/${NPKG}" ]; then
    echo "ERROR: Unable to download the new release"
    exit 1
fi

$BEADM create "$BENAME"
ALTROOT="/a"
BENUM=0
while [ -d $ALTROOT ]
do
  BENUM=$((BENUM+1))
  ALTROOT="/a.${BENUM}"
done

#
# and the ZFS dataset it corresponds to
# -a could return multiple lines, one with a dataset and possibly
# multiple snapshots; match the dataset by looking for a /
#
NEWDS=$($BEADM list -Ha "$BENAME" | awk -F\; '{if ($2~/\//) print $2}')

echo "New BE will be called $BENAME"
echo "Backed by dataset $NEWDS"
echo "And will be driven from $NEWURL"

#
# update zap in the new BE
#
mkdir $ALTROOT
$BEADM mount "$BENAME" $ALTROOT
zap uninstall -R $ALTROOT TRIBzap
${ZAPLIBDIR}/instzap -R $ALTROOT "${CACHE_DIR}/${NPKG}" TRIBzap
#
# must refresh the overlays and catalog, as contents and dependencies
# may have changed
#
# unfortunately old versions of refresh-overlays do not correctly
# handle alternate contexts, so use a fixed copy from the new BE
#
# if we have the new unified refresh, use that
#
if [ -x ${ALTROOT}/${ZAPLIBDIR}/refresh ]; then
    ${ALTROOT}/${ZAPLIBDIR}/refresh -C ${ALTROOT}
else
    ${ALTROOT}/${ZAPLIBDIR}/refresh-overlays -C ${ALTROOT}
    ${ALTROOT}/${ZAPLIBDIR}/refresh-filelist -C ${ALTROOT}
fi
#
# first we must update SUNWcsd
#
/usr/bin/zap -C ${ALTROOT} update SUNWcsd
#
# replace the critical state files from the running system
# the assumption here is that SUNWcsd installs blank files
#
/usr/bin/cp -p /etc/devlink.tab ${ALTROOT}/etc/devlink.tab
/usr/bin/cp -p /etc/driver_classes ${ALTROOT}/etc/driver_classes
/usr/bin/cp -p /etc/driver_aliases ${ALTROOT}/etc/driver_aliases
/usr/bin/cp -p /etc/iu.ap ${ALTROOT}/etc/iu.ap
/usr/bin/cp -p /etc/minor_perm ${ALTROOT}/etc/minor_perm
/usr/bin/cp -p /etc/name_to_major ${ALTROOT}/etc/name_to_major
/usr/bin/cp -p /etc/path_to_inst ${ALTROOT}/etc/path_to_inst
/usr/bin/cp -p /etc/security/device_policy ${ALTROOT}/etc/security/device_policy
/usr/bin/cp -p /etc/security/extra_privs ${ALTROOT}/etc/security/extra_privs
#
# remove obsoleted packages
#
if [ -f ${ALTROOT}/usr/share/zap/deprecated.pkgs ]; then
    echo "Removing obsoleted packages"
    /usr/bin/zap uninstall -R ${ALTROOT} $(cat ${ALTROOT}/usr/share/zap/deprecated.pkgs)
fi
#
# remove obsoleted overlays
# note this just removes any metadata, any constituent packages
# needing removal must be listed in deprecated.pkgs
#
if [ -f ${ALTROOT}/usr/share/zap/deprecated.ovl ]; then
    echo "Removing obsoleted overlays"
    for oldovl in $(cat ${ALTROOT}/usr/share/zap/deprecated.ovl)
    do
	/usr/bin/rm -f "${ALTROOT}/var/sadm/overlays/${oldovl}.pkgs"
	/usr/bin/rm -f "${ALTROOT}/var/sadm/overlays/${oldovl}.ovl"
	/usr/bin/rm -f "${ALTROOT}/var/sadm/overlays/${oldovl}.pkgs.bak"
	/usr/bin/rm -f "${ALTROOT}/var/sadm/overlays/${oldovl}.ovl.bak"
	/usr/bin/rm -f "${ALTROOT}/var/sadm/overlays/installed/${oldovl}"
    done
fi
#
# now update the remaining overlays
#
/usr/bin/zap -C ${ALTROOT} update-overlay -a
#
# do it again, because the overlay structure might have changed and
# we need to be sure that any newly added overlays get updated too
#
/usr/bin/zap -C ${ALTROOT} update-overlay -a
#
# and a 3rd pass to catch stragglers that aren't in any overlays just
# to be sure those don't hang around at old versions, especially if
# they're drivers that need to be in sync with the new kernel
#
if [ -d ${ALTROOT}/var/sadm/pkg ]; then
    cd ${ALTROOT}/var/sadm/pkg
    /usr/bin/zap -C ${ALTROOT} update TRIB*
    cd /
fi
#
# shut down pkgserv otherwise the BE cannot be unmounted
#
/usr/bin/pkgadm sync -R ${ALTROOT} -q
#
# refresh common administratively modified files
#
# many of these are marked as editable so packaging
# should leave them alone, so eventually this will
# not be necessary
#
/usr/bin/cp -p /etc/passwd ${ALTROOT}/etc/passwd
/usr/bin/cp -p /etc/shadow ${ALTROOT}/etc/shadow
/usr/bin/cp -p /etc/group ${ALTROOT}/etc/group
/usr/bin/cp -p /etc/logadm.conf ${ALTROOT}/etc/logadm.conf
/usr/bin/cp -p /etc/dumpadm.conf ${ALTROOT}/etc/dumpadm.conf
/usr/bin/cp -p /etc/coreadm.conf ${ALTROOT}/etc/coreadm.conf
/usr/bin/cp -p /etc/syslog.conf ${ALTROOT}/etc/syslog.conf
/usr/bin/cp -p /etc/nsswitch.conf ${ALTROOT}/etc/nsswitch.conf
/usr/bin/cp -p /etc/user_attr ${ALTROOT}/etc/user_attr
/usr/bin/cp -p /etc/resolv.conf ${ALTROOT}/etc/resolv.conf
/usr/bin/cp -p /etc/inet/hosts ${ALTROOT}/etc/inet/hosts
/usr/bin/cp -p /etc/inet/netmasks ${ALTROOT}/etc/inet/netmasks
/usr/bin/cp -p /etc/inet/networks ${ALTROOT}/etc/inet/networks
/usr/bin/cp -p /etc/inet/protocols ${ALTROOT}/etc/inet/protocols
/usr/bin/cp -p /etc/inet/services ${ALTROOT}/etc/inet/services
/usr/bin/cp -p /etc/inet/inetd.conf ${ALTROOT}/etc/inet/inetd.conf
/usr/bin/cp -p /etc/inet/ipsecalgs ${ALTROOT}/etc/inet/ipsecalgs
/usr/bin/cp -p /etc/inet/ipaddrsel.conf ${ALTROOT}/etc/inet/ipaddrsel.conf
/usr/bin/cp -p /etc/inet/secret/ike.preshared ${ALTROOT}/etc/inet/secret/ike.preshared
/usr/bin/cp -p /etc/zones/index ${ALTROOT}/etc/zones/index.pre-upgrade
/usr/bin/cp -p /etc/default/init ${ALTROOT}/etc/default/init
/usr/bin/cp -p /etc/ipadm/ipadm.conf ${ALTROOT}/etc/ipadm/ipadm.conf
/usr/bin/cp -p /etc/dladm/* ${ALTROOT}/etc/dladm
/usr/bin/cp -p /var/adm/utmpx ${ALTROOT}/var/adm
/usr/bin/cp -p /var/adm/wtmpx ${ALTROOT}/var/adm
/usr/bin/cp -p /var/log/syslog ${ALTROOT}/var/log
grep /swap /etc/vfstab >> ${ALTROOT}/etc/vfstab
#
# FIXME: these 2 often get mangled, need fixing properly
#
/usr/bin/cp -p /etc/minor_perm ${ALTROOT}/etc/minor_perm
/usr/bin/cp -p /etc/name_to_major ${ALTROOT}/etc/name_to_major

#
# if there is a zonelib hierarchy for sparse root zones, it needs
# to be cleaned out (at this point zones aren't supported but at
# least cleaning out zonelib will ensure that any newly created
# zones will work)
#
if [ -d ${ALTROOT}/zonelib/lib/svc ]; then
    /usr/bin/rm -fr ${ALTROOT}/zonelib/lib
    /usr/bin/mkdir -p ${ALTROOT}/zonelib/lib
fi
#
# the list of zones in /etc/zones/index is now preserved by packaging,
# so it's no longer necessary (and results in duplicate entries) to
# manually propagate entries
#
# but we do need to undo any duplicates that might have been added by
# previous broken upgrades
#
/usr/bin/uniq /etc/zones/index > ${ALTROOT}/etc/zones/index

#
# this is the new zone upgrade path, which runs an upgrade script for
# each zone
#
# zoneadm list output format is
# id:name:state:path:uuid:brand:ip-type
# what we're interested in is the name, path, and brand
#
# we look for the brand-specific upgrader in the *new* BE, to give
# the ability to apply bugfixes there
#
# zone brands that don't need to do any work on upgrade should simply
# return 0 from their upgrader
#
/usr/sbin/zoneadm list -icpn | awk -F: '{print $2,$4,$6}' | while read -r zname zpath zbrand
do
    UPGRADER="${ALTROOT}/usr/lib/brand/${zbrand}/zap-upgrade"
    if [ -x "${UPGRADER}" ]; then
	echo "Running upgrade script for ${zbrand} zone ${zname}"
	${UPGRADER} -R ${ALTROOT} -b "${zbrand}" -z "${zname}" -p "${zpath}" -v "${NEWVER}"
    else
	echo "No upgrade script found for ${zbrand} zone ${zname}"
    fi
done

#
# need to update the boot archive
#
/usr/sbin/bootadm update-archive -R $ALTROOT
$BEADM unmount "$BENAME"
rmdir $ALTROOT
#
# activation is optional
# observation indicates that beadm might leave the old dataset mountable
# on /, which the system tries to do at boot, which fails then causing the
# whole boot to fail, so override that just in case it's wrong. The correct
# setting for canmount is 'noauto' but some older Tribblix installs didn't
# set it that way
#
echo "Upgrade complete"
$ZFSCMD set canmount=noauto "$OLDDS"
$ZFSCMD set canmount=noauto "$NEWDS"
$ZFSCMD set mountpoint=/ "$OLDDS"
$ZFSCMD set mountpoint=/ "$NEWDS"
if [ "X${ACTIVATE}" = "Xtrue" ]; then
  echo "Activating new BE"
  $BEADM activate "$BENAME"
  init 6
else
  echo ""
  echo "====================================================="
  echo "|| To switch to the newly upgraded version, issue  ||"
  echo "|| the following commands:                         ||"
  printf "||   beadm activate %-31s||\n" "$BENAME"
  echo "||   init 6                                        ||"
  echo "====================================================="
fi
