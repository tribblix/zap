#!/bin/ksh
#
# SPDX-License-Identifier: CDDL-1.0
#
# {{{ CDDL HEADER
#
# This file and its contents are supplied under the terms of the
# Common Development and Distribution License ("CDDL"), version 1.0.
# You may only use this file in accordance with the terms of version
# 1.0 of the CDDL.
#
# A full copy of the text of the CDDL should have accompanied this
# source. A copy of the CDDL is also available via the Internet at
# http://www.illumos.org/license/CDDL.
#
# }}}
#
# Copyright 2025 Peter Tribble
#

ZAPLIBDIR="/usr/lib/zap"
ODIR="/var/sadm/overlays"
INSTODIR="${ODIR}"
PKGARGS=""
DESTROOT=""
SRCARGS=""
NINSTALLED=0
NFAILED=0

case $1 in
-C)
	DESTROOT="$2"
	PKGARGS="-R ${DESTROOT}"
	CTXARGS="-C ${DESTROOT}"
	shift
	shift
	if [ ! -d "$DESTROOT" ]; then
	    echo "ERROR: alternate root $DESTROOT doesn't exist"
	    exit 1
	fi
	if [ ! -d "$DESTROOT/var/sadm/pkg" ]; then
	    echo "ERROR: alternate root $DESTROOT is invalid"
	    exit 1
	fi
	INSTODIR="${DESTROOT}/${ODIR}"
	OVLARGS="-C ${DESTROOT}"
	;;
esac

case $1 in
-R)
	DESTROOT="$2"
	PKGARGS="-R ${DESTROOT}"
	shift
	shift
	if [ ! -d "$DESTROOT" ]; then
	    echo "ERROR: alternate root $DESTROOT doesn't exist"
	    exit 1
	fi
	if [ ! -d "$DESTROOT/var/sadm/pkg" ]; then
	    echo "ERROR: alternate root $DESTROOT is invalid"
	    exit 1
	fi
	INSTODIR="${DESTROOT}/${ODIR}"
	OVLARGS="-R ${DESTROOT}"
	;;
esac

SRCLIST=$(${ZAPLIBDIR}/zap-cfg ${CTXARGS} cache-dir)

#
# if we have access to a global cache, prepend that
#
if [ -d /var/zap/global-cache ]; then
    SRCLIST="/var/zap/global-cache $SRCLIST"
fi

#
# prepend the given source to the list, so it gets searched first
#
case $1 in
-s)
	SRCEXTRA="$2"
	SRCARGS="-s ${SRCEXTRA}"
	shift
	shift
	if [ ! -d "$SRCEXTRA" ]; then
	    echo "ERROR: package source $SRCEXTRA doesn't exist"
	    exit 1
	fi
	SRCLIST="$SRCEXTRA $SRCLIST"
	;;
esac

case $# in
0)
	echo "Usage: $0 [-R alt-root] [ -s source] package [package...]"
	exit 2
	;;
esac

#
# if we're passed an overlay, treat it as such
#
for ovl in "$@"
do
    if [ -f "${INSTODIR}/${ovl}.ovl" ]; then
	if [ ! -f "${INSTODIR}/installed/${ovl}" ]; then
	    echo "Installing matching overlay $ovl"
	    ${ZAPLIBDIR}/install-overlay ${OVLARGS} ${SRCARGS} "$ovl"
	fi
    fi
done

#
# first look for and download any packages we need
#
pkglist=""
for pkg in $(${ZAPLIBDIR}/resolve-alias ${CTXARGS} "$@")
do
  if [ -f "${DESTROOT}/var/sadm/pkg/${pkg}/pkginfo" ]; then
    echo "Package $pkg already installed"
  else
    pkglist="${pkglist} $pkg"
    ISINST="false"
    fpkg=$(${ZAPLIBDIR}/get-version ${CTXARGS} "$pkg")
    fpkg=${fpkg%% *}
    for SRCDIR in $SRCLIST
    do
	if [ -f "${SRCDIR}/${fpkg}.zap" ]; then
	    ISINST="true"
	    break
	fi
    done
    # download if we don't have it yet
    if [ "$ISINST" = "false" ]; then
	${ZAPLIBDIR}/retrieve-pkg ${CTXARGS} "${pkg}"
    fi
  fi
done

#
# we have resolved all names and only have uninstalled packages,
# so no need to check again
#
for pkg in $pkglist
do
  ISINST="false"
  fpkg=$(${ZAPLIBDIR}/get-version ${CTXARGS} "$pkg")
  fpkg=${fpkg%% *}
  for SRCDIR in $SRCLIST
  do
    if [ -f "${SRCDIR}/${fpkg}.zap" ]; then
      ${ZAPLIBDIR}/instzap ${PKGARGS} "${SRCDIR}/${fpkg}.zap" "${pkg}"
      ISINST="true"
      break
    fi
  done
  if [ "$ISINST" = "false" ]; then
    echo "No source for package ${pkg}"
    ${ZAPLIBDIR}/psearch "$pkg"
    NFAILED=$((NFAILED+1))
  else
    NINSTALLED=$((NINSTALLED+1))
  fi
done

if [ $NFAILED -eq 0 ]; then
    echo "Installed $NINSTALLED packages"
else
    echo "Installed $NINSTALLED packages, $NFAILED failed"
fi

exit $NFAILED
